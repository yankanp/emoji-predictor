# -*- coding: utf-8 -*-
"""EmojiFlask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q5kzo0Ph8Ovbk86-sgAAajmuC6Ksf8-K
"""

from flask import Flask,request,jsonify
import pandas as pd
import os
import numpy as np
from keras.models import Sequential
from keras.layers import *
from keras.utils import to_categorical
from flask_cors import CORS, cross_origin

mapping = pd.read_csv("Mapping.csv")
mapping = mapping.drop("Unnamed: 0", axis=1)
mapping = mapping.set_index('number')
emoji_dict = mapping.to_dict()
emoji_dict = emoji_dict['emoticons']
emoji_dict

maxLen = 20

#open the glove file and get the coefficent for each word
f = open('glove.6B.50d.txt')
embeddings_index={}

for line in f:
  values = line.split()
  word = values[0]
  coef = np.asarray(values[1:],dtype='float')
  embeddings_index[word]=coef

def get_embedding_output(X):
    # maxLen = 20
    embedding_output = np.zeros((len(X), maxLen, 50))
    
    for ix in range(X.shape[0]):
        my_example = X[ix].split()
        
#         print(my_example)       
        for ij in range(len(my_example)): 
            if (embeddings_index.get(my_example[ij].lower()) is not None) and (ij<maxLen):
                embedding_output[ix][ij] = embeddings_index[my_example[ij].lower()]
            
    return embedding_output

model = Sequential()
model.add(Bidirectional(LSTM(units = 512, return_sequences=True), input_shape = (maxLen,50)))
model.add(Dropout(0.3))
model.add(Bidirectional(LSTM(units=256)))
model.add(Dropout(0.3))
model.add(Dense(units=128, activation='relu'))
model.add(Dense(units=64, activation='relu'))
model.add(Dense(units=32, activation='relu'))
model.add(Dense(units=16, activation='softmax'))
model.summary()

def emojiPredict(text):
    model = Sequential()
    model.add(LSTM(512,input_shape=(maxLen,50)))
    model.add(Dropout(0.3))
    model.add(Dense(units=128, activation='relu'))
    model.add(Dense(units=16, activation='softmax'))
    # model.summary()
    model.load_weights("best_model_glove_1_layer.h5")
    return emoji_dict[np.argmax(model.predict(get_embedding_output(np.asarray([text]))))]

app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

@app.route("/")
@cross_origin()
def hello():
    return "Emoji Predictor CSC 461"

@app.route("/predict", methods=['GET'])
@cross_origin()
def predict():
    text=request.args.get('text')
    emoji = emojiPredict(text)
    data ={
        "text":text,
        "emoji":emoji
    }
    
    return jsonify(data)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=True,host='0.0.0.0',port=port)